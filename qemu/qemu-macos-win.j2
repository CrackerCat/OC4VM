# OC4VM VERSION
# {{VERSION}}
# {{VARIANT}}
# SPDX-FileCopyrightText: Â© 2023-25 David Parsons
# SPDX-License-Identifier: MIT

# Parameter definition
param (
    [Parameter(HelpMessage="QEMU accelerator to use.")]
    [string]$AccelType = "tcg",
    [Parameter(HelpMessage="Amount of memory to allocate to VM.")]
    [string]$MemorySize = 4,
    [Parameter(HelpMessage="macOS drive image to use.")]
    [string]$macOSImage = "macos.qcow2",
    [Parameter(HelpMessage="OpenCore boot image.")]
    [string]$OpencoreImage = "opencore.qcow2",
    [Parameter(HelpMessage="macOS recoveryOS image.")]
    [string]$RecoveryImage,
    [Parameter(HelpMessage="Enable serial output.")]
    [switch]$EnableSerial
)

Write-Host "OC4VM QEMU Runner for Windows (Experimental)"

# Process AccelType
if ($AccelType) {
    if ((Get-WmiObject Win32_Processor).Architecture -eq 5) {  # ARM64
        $AccelType = "tcg"
    }
    Write-Host "Accelerator: $AccelType"
    switch ($AccelType) {
        "aehd" { }
        "whpx" { 
            $AccelType = "whpx,kernel-irqchip=off"
            Write-Host "ERROR: whpx accelerator is currently broken in QEMU!"
            exit 1
        }
        "tcg" { }
        default {
            Write-Host "ERROR: Invalid accelerator option: $AccelType"
            exit 1
        }
    }
}

# Process MemorySize
if ($MemorySize) {
    Write-Host "Memory size: $MemorySize"
    if ($MemorySize -notmatch '^\d+$') {
        Write-Host "ERROR: Memory size $MemorySize not an integer!"
        exit 1
    }
    if ([int]$MemorySize -lt 4) {
        Write-Host "ERROR: Memory size must be 4GB or greater!"
        exit 1
    }
}

# Process macOSImage
if ($macOSImage) {
    Write-Host "macOS image: $macOSImage"
    if (-not (Test-Path $macOSImage)) {
        Write-Host "ERROR: $macOSImage not found!"
        exit 1
    }
}

# Process OpencoreImage
if ($OpencoreImage) {
    Write-Host "OpenCore image: $OpencoreImage"
    if (-not (Test-Path $OpencoreImage)) {
        Write-Host "ERROR: $OpencoreImage not found!"
        exit 1
    }
}

# Process RecoveryImage
if ($RecoveryImage) {
    Write-Host "Recovery image: $RecoveryImage"
    $RecoveryImage = $RecoveryImage
    if (-not (Test-Path $RecoveryImage)) {
        Write-Host "ERROR: $RecoveryImage not found!"
        exit 1
    }
}

# Process EnableSerial
if ($EnableSerial) {
    Write-Host "Serial output enabled"
}

# Build QEMU arguments array
$args = @(
    "-name", "{{DESCRIPTION}}"
    "-cpu", "Skylake-Client-noTSX-IBRS,pdpe1gb=off,vmware-cpuid-freq=on,vendor=GenuineIntel,check"
    "-smp", "cpus=2,sockets=1,cores=2,threads=1"
    "-machine", "q35,vmport=off,i8042=off,hpet=off"
    "-accel", $AccelType
    "-m", "$($MemorySize)G"
    "-nodefaults"
    "-device", "virtio-net-pci,mac=66:C9:75:99:89:AC,netdev=net0"
    "-netdev", "user,id=net0"
    "-device", "virtio-vga"
    "-device", "virtio-rng-pci"
    "-global", "ICH9-LPC.disable_s3=1"
    "-drive", "if=pflash,format=raw,unit=0,file.filename=./edk2-x86_64-code.fd,file.locking=off,readonly=on"
    "-drive", "if=pflash,format=raw,unit=1,file=./efi_vars.fd"
    "-device", "virtio-blk,drive=opencore,bootindex=0"
    "-drive", "if=none,media=disk,id=opencore,file=$OpencoreImage,discard=unmap,detect-zeroes=unmap"
    "-device", "virtio-blk,drive=macos,bootindex=1"
    "-drive", "if=none,media=disk,id=macos,file=$macOSImage,discard=unmap,detect-zeroes=unmap"
    "-device", "qemu-xhci"
    "-device", "usb-tablet"
    "-device", "usb-kbd"
    "-smbios", "type=1"
    # TODO: Enable audio
    # "-audiodev", "coreaudio,id=audio0"
    # "-device", "ich9-intel-hda"
    # "-device", "hda-output,audiodev=audio0"
)


if ($RecoveryImage) {
    $args += @(
        "-device", "virtio-blk,drive=recoveryos,bootindex=2"
        "-drive", "if=none,media=disk,id=recoveryos,file=$RecoveryImage,discard=unmap,detect-zeroes=unmap"
    )
}

if ($EnableSerial) {
    $args += @(
        "-chardev", "stdio,id=char0,mux=on,logfile=serial.log,signal=off"
        "-serial", "chardev:char0"
        "-mon", "chardev=char0"
    )
}

# Run QEMU
# Write-Host "$args"
& qemu-system-x86_64 $args
