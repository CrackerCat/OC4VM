#!/usr/bin/env python3

# OC4VM siputil
# {{VERSION}}-{{COMMIT}}
# SPDX-FileCopyrightText: Â© 2023-25 David Parsons
# SPDX-License-Identifier: MIT

import argparse
import binascii
import os
import plistlib
import platform

# Emulates csrutil utility for Opencore
if platform.system() != 'Darwin':
    print('csrutil is a macOS-specific command.')
    exit(4)

# From xnu csr.h file
# CSR configuration flags
CSR_ALLOW_UNTRUSTED_KEXTS = (1 << 0)
CSR_ALLOW_UNRESTRICTED_FS = (1 << 1)
CSR_ALLOW_TASK_FOR_PID = (1 << 2)
CSR_ALLOW_KERNEL_DEBUGGER = (1 << 3)
CSR_ALLOW_APPLE_INTERNAL = (1 << 4)
# CSR_ALLOW_DESTRUCTIVE_DTRACE = (1 << 5)  /* name deprecated */
CSR_ALLOW_UNRESTRICTED_DTRACE = (1 << 5)
CSR_ALLOW_UNRESTRICTED_NVRAM = (1 << 6)
CSR_ALLOW_DEVICE_CONFIGURATION = (1 << 7)
CSR_ALLOW_ANY_RECOVERY_OS = (1 << 8)
CSR_ALLOW_UNAPPROVED_KEXTS = (1 << 9)
CSR_ALLOW_EXECUTABLE_POLICY_OVERRIDE = (1 << 10)
CSR_ALLOW_UNAUTHENTICATED_ROOT = (1 << 11)
CSR_ALLOW_RESEARCH_GUESTS = (1 << 12)

CSR_VALID_FLAGS = (CSR_ALLOW_UNTRUSTED_KEXTS |
                   CSR_ALLOW_UNRESTRICTED_FS |
                   CSR_ALLOW_TASK_FOR_PID |
                   CSR_ALLOW_KERNEL_DEBUGGER |
                   CSR_ALLOW_APPLE_INTERNAL |
                   CSR_ALLOW_UNRESTRICTED_DTRACE |
                   CSR_ALLOW_UNRESTRICTED_NVRAM |
                   CSR_ALLOW_DEVICE_CONFIGURATION |
                   CSR_ALLOW_ANY_RECOVERY_OS |
                   CSR_ALLOW_UNAPPROVED_KEXTS |
                   CSR_ALLOW_EXECUTABLE_POLICY_OVERRIDE |
                   CSR_ALLOW_UNAUTHENTICATED_ROOT |
                   CSR_ALLOW_RESEARCH_GUESTS)

CSR_ALWAYS_ENFORCED_FLAGS = (
    CSR_ALLOW_DEVICE_CONFIGURATION |
    CSR_ALLOW_ANY_RECOVERY_OS)

# Flags set by `csrutil disable`.
CSR_DISABLE_FLAGS = (CSR_ALLOW_UNTRUSTED_KEXTS |
                     CSR_ALLOW_UNRESTRICTED_FS |
                     CSR_ALLOW_TASK_FOR_PID |
                     CSR_ALLOW_KERNEL_DEBUGGER |
                     CSR_ALLOW_APPLE_INTERNAL |
                     CSR_ALLOW_UNRESTRICTED_DTRACE |
                     CSR_ALLOW_UNRESTRICTED_NVRAM)

# CSR capabilities that a booter can give to the system
CSR_CAPABILITY_UNLIMITED = (1 << 0)
CSR_CAPABILITY_CONFIG = (1 << 1)
CSR_CAPABILITY_APPLE_INTERNAL = (1 << 2)

CSR_VALID_CAPABILITIES = (CSR_CAPABILITY_UNLIMITED |
                          CSR_CAPABILITY_CONFIG |
                          CSR_CAPABILITY_APPLE_INTERNAL)

# FLags used by this utility
SIP_ENABLE_ALL = 0
SIP_DISABLE_ALL = CSR_DISABLE_FLAGS | CSR_ALLOW_UNAUTHENTICATED_ROOT
MASK_ENABLE_FLAGS = ~SIP_DISABLE_ALL

# Option flags
DEBUG = False
CONFIG_PLIST = '/Volumes/OPENCORE/EFI/OC/config.plist'

# NVRAM variables
APPLE_NVRAM_VARIABLE_GUID = '7C436110-AB2A-4BBB-A880-FE41995C9F82'


def hexswap(input_hex: str):
    hex_pairs = [input_hex[i: i + 2] for i in range(0, len(input_hex), 2)]
    hex_rev = hex_pairs[::-1]
    hex_str = "".join(["".join(x) for x in hex_rev])
    return hex_str.upper()


def string_to_hex(input_string):
    if not (len(input_string) % 2) == 0:
        input_string = "0" + input_string
    input_string = hexswap(input_string)
    input_string = binascii.unhexlify(input_string)
    return input_string


def print_help():
    help_text = '''
Modify the System Integrity Protection configuration stored in the OpenCore config.plist.
All configuration changes apply to the entire machine.

usage: siputil <options> <command>

Available options:
-h/--help       Show this help
-f/--file       Override the default config.plist location
-d/--debug      Show some additonal debugging information

Available commands:

    clear
        Clear the existing configuration.
    disable
        Disable the protection on the machine.
    enable
        Enable the protection on the machine.
    status
        Display the current configuration.
'''
    print(help_text)
    return


def print_value(prefix, value, suffix):
    raw = string_to_hex(f'{value:0>8X}')
    b64 = plistlib._encode_base64(raw).decode().rstrip('\n')
    print(f'{prefix} {value} 0x{value:0>8X} {raw} {b64} {suffix}')
    return


def get_config():
    with open(CONFIG_PLIST, 'rb') as f:
        config = plistlib.load(f)
    return config


def set_config(config):
    with open(CONFIG_PLIST, 'wb') as f:
        plistlib.dump(config, f)
    return


def get_value():
    config = get_config()
    value = int.from_bytes(config['NVRAM']['Add'][APPLE_NVRAM_VARIABLE_GUID]['csr-active-config'], 'little')
    return value


def set_value(value):
    global DEBUG
    config = get_config()
    raw = string_to_hex(f'{value:0>8X}')
    config['NVRAM']['Add'][APPLE_NVRAM_VARIABLE_GUID]['csr-active-config'] = raw
    set_config(config)
    if DEBUG:
        check = get_value()
        if check != value:
            print('Error value not correctly saved')
            return
    return


def siputil_clear():
    global DEBUG
    value = SIP_ENABLE_ALL
    global DEBUG
    if DEBUG:
        print_value('[debug] clear:', value, '')
    set_value(value)
    return


def siputil_disable(with_lists=None):
    global DEBUG
    # Get the inital value and set default disabled bits
    value = get_value()
    if DEBUG:
        print_value('[debug] disable initial:', value, '')
    value = value | SIP_DISABLE_ALL
    if DEBUG:
        print_value('[debug] disable masked:', value, '')

    # Process any --with options
    if with_lists:
        for with_list in with_lists:
            match with_list[0]:
                case 'apple':
                    value = value & ~CSR_ALLOW_APPLE_INTERNAL
                case 'authroot':
                    value = value & ~CSR_ALLOW_UNAUTHENTICATED_ROOT
                case 'basesystem':
                    value = value & ~CSR_ALLOW_ANY_RECOVERY_OS
                case 'debug':
                    value = value & ~CSR_ALLOW_TASK_FOR_PID
                case 'dtrace':
                    value = value & ~CSR_ALLOW_UNRESTRICTED_DTRACE
                case 'fs':
                    value = value & ~CSR_ALLOW_UNRESTRICTED_FS
                case 'kext':
                    value = value & ~CSR_ALLOW_UNTRUSTED_KEXTS
                case 'nvram':
                    value = value & ~CSR_ALLOW_UNRESTRICTED_NVRAM
                case _:
                    print('siputil: --with requires an argument.')
                    print_help()
                    return
            if DEBUG:
                print_value('[debug] disable with:', value, with_list[0])

    if DEBUG:
        print_value('[debug] disable final:', value, '')
    set_value(value)
    siputil_status()
    return


def siputil_enable(without_lists=None):
    global DEBUG
    # Get the inital value and set default disabled bits
    value = get_value()
    if DEBUG:
        print_value('[debug] enable initial:', value, '')
    value = value & MASK_ENABLE_FLAGS
    if DEBUG:
        print_value('[debug] enable masked:', value, '')

    # Process any --without options
    if without_lists:
        for without_list in without_lists:
            match without_list[0]:
                case 'apple':
                    value = value | CSR_ALLOW_APPLE_INTERNAL
                case 'authroot':
                    value = value | CSR_ALLOW_UNAUTHENTICATED_ROOT
                case 'basesystem':
                    value = value | CSR_ALLOW_ANY_RECOVERY_OS
                case 'debug':
                    value = value | CSR_ALLOW_KERNEL_DEBUGGER
                case 'dtrace':
                    value = value | CSR_ALLOW_UNRESTRICTED_DTRACE
                case 'fs':
                    value = value | CSR_ALLOW_UNRESTRICTED_FS
                case 'kext':
                    value = value | CSR_ALLOW_UNTRUSTED_KEXTS
                case 'nvram':
                    value = value | CSR_ALLOW_UNRESTRICTED_NVRAM
                case _:
                    print('siputil: --without requires an argument.')
                    print_help()
                    return
            if DEBUG:
                print_value('[debug] enable with:', value, without_list[0])

    if DEBUG:
        print_value('[debug] enable final:', value, '')
    set_value(value)
    siputil_status()
    return


def siputil_status():
    global DEBUG
    print('OpenCore SIP status:')
    value = get_value()
    print_value('\tcsr-active-config:', value, '')
    if value == SIP_ENABLE_ALL:
        print('\tStatus: enabled')
    elif value == SIP_DISABLE_ALL:
        print('\tStatus: disabled')
    else:
        print('\tStatus: custom')
    print('\tConfiguration:')
    msg = 'Apple Internal: '
    if value & CSR_ALLOW_APPLE_INTERNAL:
        status = 'disabled'
    else:
        status = 'enabled'
    print(f'\t\t{msg} {status}')

    msg = 'Authenticated Root: '
    if value & CSR_ALLOW_UNAUTHENTICATED_ROOT:
        status = 'disabled'
    else:
        status = 'enabled'
    print(f'\t\t{msg} {status}')

    msg = 'Kext Signing: '
    if value & CSR_ALLOW_UNTRUSTED_KEXTS:
        status = 'disabled'
    else:
        status = 'enabled'
    print(f'\t\t{msg} {status}')

    msg = 'Filesystem Protections: '
    if value & CSR_ALLOW_UNRESTRICTED_FS:
        status = 'disabled'
    else:
        status = 'enabled'
    print(f'\t\t{msg} {status}')

    msg = 'Debugging Restrictions: '
    if value & CSR_ALLOW_KERNEL_DEBUGGER:
        status = 'disabled'
    else:
        status = 'enabled'
    print(f'\t\t{msg} {status}')

    msg = 'DTrace Restrictions: '
    if value & CSR_ALLOW_UNRESTRICTED_DTRACE:
        status = 'disabled'
    else:
        status = 'enabled'
    print(f'\t\t{msg} {status}')

    msg = 'NVRAM Protections: '
    if value & CSR_ALLOW_UNRESTRICTED_NVRAM:
        status = 'disabled'
    else:
        status = 'enabled'
    print(f'\t\t{msg} {status}')

    msg = 'BaseSystem Verification: '
    if value & CSR_ALLOW_ANY_RECOVERY_OS:
        status = 'disabled'
    else:
        status = 'enabled'
    print(f'\t\t{msg} {status}')

    return


def main():
    # Setup parser and get args
    parser = argparse.ArgumentParser(description='Opencore macOS siputil command.', add_help=False)
    parser.add_argument('-f', '--file')
    parser.add_argument('-d', '--debug', action='store_true')
    parser.add_argument('-h', '--help', action='store_true')

    subparsers = parser.add_subparsers(dest='command')
    clear_parser = subparsers.add_parser('clear')
    disable_parser = subparsers.add_parser('disable')
    disable_parser.add_argument('--with', nargs='+', action='append', dest='with_lists')
    enable_parser = subparsers.add_parser('enable')
    enable_parser.add_argument('--without', nargs='+', action='append', dest='without_lists')
    status_parser = subparsers.add_parser('status')

    args = parser.parse_args()

    print('OC4VM siputil')
    print('-------------')

    # Print help if requested
    if args.help or args.command == None:
        print_help()
        return

    # Enable debug if requested
    if args.debug:
        global DEBUG
        DEBUG = True

    # Override filename if requested
    if args.file:
        global CONFIG_PLIST
        CONFIG_PLIST = args.file

    # Check file exists
    if not os.path.isfile(CONFIG_PLIST):
        print(f'Error: {CONFIG_PLIST} not found!')
        return

    # Execute the command
    if args.command == 'clear':
        siputil_clear()
    elif args.command == 'disable':
        siputil_disable(args.with_lists)
    elif args.command == 'enable':
        siputil_enable(args.without_lists)
    elif args.command == 'status':
        siputil_status()
    else:
        print_help()
    return


if __name__ == '__main__':
    main()
