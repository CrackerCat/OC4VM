# OC4VM VMware Configurator
# {{VERSION}}
# {{VARIANT}}
# SPDX-FileCopyrightText: Â© 2023-25 David Parsons
# SPDX-License-Identifier: MIT

# Debugging (Uncomment to enable)
# Set-PSDebug -Trace 1

Write-Host "OC4VM VMware Configurator"

# Default values
$DISK_IMAGE = "macos.vmdk"
$MEMORY_SIZE = 4
$OPENCORE_IMG = "opencore.vmdk"
$RECOVERY_FLAG = $false
$RECOVERYOS_IMG = ""
$SERIAL_FLAG = $false

# Parse command-line arguments
param (
    [string]$DiskImage,
    [int]$MemorySize,
    [string]$OpencoreImage,
    [string]$RecoveryImage,
    [switch]$EnableSerial
)

try {
    if ($DiskImage) {
        Write-Host "macOS image: $DiskImage"
        $DISK_IMAGE = $DiskImage
        if (-not (Test-Path $DISK_IMAGE)) {
            Write-Error "ERROR: $DISK_IMAGE not found!"
            exit 1
        }
        vmcli macos.vmx configparams setentry sata0:1.fileName $DISK_IMAGE
    }

    if ($MemorySize) {
        Write-Host "Memory size: $MemorySize"
        $MEMORY_SIZE = $MemorySize
        if ($MEMORY_SIZE -lt 4) {
            Write-Error "ERROR: Memory size must be 4GB or greater!"
            exit 1
        }
    }

    if ($OpencoreImage) {
        Write-Host "OpenCore image: $OpencoreImage"
        $OPENCORE_IMG = $OpencoreImage
        if (-not (Test-Path $OPENCORE_IMG)) {
            Write-Error "ERROR: $OPENCORE_IMG not found!"
            exit 1
        }
        vmcli macos.vmx configparams setentry sata0:0.fileName $OPENCORE_IMG
    }

    if ($RecoveryImage) {
        Write-Host "Recovery image: $RecoveryImage"
        $RECOVERY_FLAG = $true
        $RECOVERYOS_IMG = $RecoveryImage
        if (-not (Test-Path $RECOVERYOS_IMG)) {
            Write-Error "ERROR: $RECOVERYOS_IMG not found!"
            exit 1
        }
        vmcli macos.vmx configparams setentry sata0:3.fileName $RECOVERYOS_IMG
        vmcli macos.vmx configparams setentry sata0:3.present $true
    }

    if ($EnableSerial) {
        Write-Host "Serial output enabled"
        $SERIAL_FLAG = $true
        vmcli macos.vmx configparams setentry serial0.startConnected $true
    }
} catch {
    Write-Error "ERROR: $($_.Exception.Message)"
    Show-Usage
    exit 1
}

Write-Host "Configuration complete."
